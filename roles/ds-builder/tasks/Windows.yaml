---
- name: Include windows architecture variables.
  include_vars: "{{ win_target }}.yaml"

- name: Remove Windows Defender
  win_feature:
    name: Windows-Defender
    state: absent
  register: win_feature
  changed_when: win_feature.reboot_required
  notify: restart-server
  when: ansible_os_product_type == "server"

- name: Install Chocolatey packages
  win_chocolatey:
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
    architecture: "{{ item.architecture | default(omit) }}"
    state: latest
  with_items: "{{ chocolatey_packages }}"
  notify: restart-server

- name: Create download directory
  win_file:
    path: "{{ download_path }}"
    state: directory

- name: Download packages
  win_get_url:
    url: "{{ item.url }}"
    dest: "{{ item.path }}"
    headers: "{{ item.headers | default(omit) }}"
    force: no
  with_items:
    - "{{ packages }}"
    - "{{ mingw_packages }}"
  register: result
  until: result.status_code == 200
  retries: 5
  delay: 60

- name: Get vs.xml
  win_template:
    src: 'vs/vs.xml.jn2'
    dest: '{{ vs_auto_install }}'

# - name: Download msys2 auto-install.js
#   win_get_url:
#     url: https://raw.githubusercontent.com/msys2/msys2-installer/master/auto-install.js
#     dest: '{{ msys2_auto_install }}'

- name: Get msys2-auto-install.qs
  win_template:
    src: 'msys/msys2-auto-install.qs.jn2'
    dest: '{{ msys2_auto_install }}'

- name: Get qt-auto-install.qs
  win_template:
    src: 'qti/qt-auto-install.qs.jn2'
    dest: '{{ qt_auto_install }}'

- name: Get qt56-auto-install.qs
  win_template:
    src: 'qti/qt56-auto-install.qs.jn2'
    dest: '{{ qt56_auto_install }}'

- name: Disable Qt login
  win_hosts:
    canonical_name: iapi.qt.io
    ip_address: 127.0.0.1

- name: Install packages GUIDed packages
  win_package:
    path: "{{ item.path }}"
    product_id: "{{ item.product_id|default(omit) }}"
    creates_path: "{{ item.creates_path|default(omit) }}"
    arguments: "{{ item.arguments }}"
  when: item.product_id is defined
  with_items:
    - "{{ packages }}"

- name: Install additional langs for innosetup
  win_get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
  with_items:
    - "{{ innosetup_langs }}"

- name: Check is mingw installed
  win_stat:
    path: "{{ mingw_path }}"
  register: mingw_path_stat

- name: Install mingw packages
  win_command: "\"{{ program_files }}\\7-Zip\\7z.exe\" x {{ mingw_packages[0].path }} -o{{ mingw_path }}"
  args:
    creates: "{{ mingw_path }}"

- name: Set up PATH variable
  win_path:
    elements:
    - '{{ exec_path }}'
  notify: restart-server

- name: Check is grunt installed
  win_stat:
    path: "{{ grunt_path }}"
  register: grunt_path_stat

- name: Check is pkg installed
  win_stat:
    path: "{{ pkg_path }}"
  register: pkg_path_stat

- name: Get current npm path 
  win_command: "npm.cmd prefix -g"
  register: npm_path_stat
  when: grunt_path_stat.stat.exists != true or pkg_path_stat.stat.exists != true

- name: Setup npm path 
  win_command: "npm.cmd config set prefix {{ npm_path }}"
  when: grunt_path_stat.stat.exists != true or pkg_path_stat.stat.exists != true

- name: Install grunt
  win_command: "npm.cmd install grunt-cli -g"
  when: grunt_path_stat.stat.exists != true

- name: Install pkg
  win_command: "npm.cmd install pkg -g"
  when: pkg_path_stat.stat.exists != true

- name: Restore npm path 
  win_command: "npm.cmd config set prefix {{ npm_path_stat.stdout_lines[0] }}"
  when: grunt_path_stat.stat.exists != true or pkg_path_stat.stat.exists != true

- name: Set Unicode UTF-8 as default codepage
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage
    name: OEMCP
    data: 65001

- name: Add or update registry path
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
    name: LocalAccountTokenFilterPolicy
    data: 1
    type: dword

- name: Add or update registry path
  win_regedit:
    path: HKLM:\System\CurrentControlSet\Control\Lsa
    name: LMCompatibilityLevel
    data: 2
    type: dword
  notify: restart-server
